// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  String    @default("user") // user, admin
  verificationCode      String?
  verificationExpires   DateTime?
  verificationAttempts  Int       @default(0)
  lastCodeSentAt        DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  orders Order[]
  accounts Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  images      Json     // Array of image URLs
  category    String
  sizes       Json     // Available sizes: XS, S, M, L, XL, XXL
  colors      Json     // Available colors
  stock       Int      @default(0)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
}

model Order {
  id               String      @id @default(cuid())
  userId           String
  status           String      @default("pending") // pending, processing, shipped, delivered, cancelled
  total            Float
  deliveryMethod   String      // post, post-regular, sdek
  deliveryPointId  String?
  address          String?
  postalCode       String?
  paymentStatus    String      @default("pending") // pending, paid, failed
  paymentMethod    String?     // card, cash
  customerName     String
  customerEmail    String
  customerPhone    String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  deliveryPoint DeliveryPoint? @relation(fields: [deliveryPointId], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String
  color     String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model DeliveryPoint {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  country   String
  phone     String?
  workingHours String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

